{"version":3,"sources":["CreateSurvey.js","Survey.js","Results.js","apiCall.js","App.js","reportWebVitals.js","index.js"],"names":["initialValues","surveyTitle","options","option","CreateSurvey","props","Fragment","Header","as","onSubmit","surveyData","createSurvey","values","Container","text","name","remove","push","Grid","Row","columns","Column","width","htmlFor","fluid","required","id","Input","placeholder","length","map","index","type","component","className","Button","icon","size","onClick","Icon","labelPosition","participantName","Survey","i","Object","assign","createParticipantData","min","max","square","height","Results","winningOptionIndex","this","winningOption","Segment","circular","style","inverted","Subheader","Table","celled","data","Cell","Body","participantData","participant","Footer","results","sum","Component","getParticipantData","a","fetch","response","json","getSurveyDataFromServer","method","headers","body","JSON","stringify","surveyId","exports","App","state","showLanding","showCreateSurvey","showSurvey","showResults","bind","createNewParticipant","setState","api","then","survey_name","survey_id","resultsFromSurvey","document","title","Menu","pointing","secondary","Item","faPoll","padded","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iVAMMA,EAAgB,CACrBC,YAAa,GACZC,QAAS,CACP,CACEC,OAAQ,MA+GCC,EA1GM,SAACC,GAAD,OACnB,eAAC,IAAMC,SAAP,WACE,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,gCACA,cAAC,IAAD,CACER,cAAeA,EACfS,SAAU,SAACC,GACTL,EAAMM,aAAaD,IAHvB,SAMG,gBAAGE,EAAH,EAAGA,OAAH,OACC,cAACC,EAAA,EAAD,CAAWC,MAAI,EAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAYC,KAAK,UAAjB,SACG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAX,OACC,eAACC,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,IAAN,CAAUC,QAAS,EAAnB,UACE,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,EAApB,SACE,uBAAOC,QAAQ,cAAf,4BAEF,cAACL,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAApB,SACC,cAAC,IAAD,CAAOE,OAAK,EACTC,UAAQ,EACRC,GAAG,cACHlB,GAAImB,IACJZ,KAAK,cACLa,YAAY,kBAGhB,cAACV,EAAA,EAAKG,OAAN,CAAaC,MAAO,OAGrBV,EAAOV,QAAQ2B,OAAS,GACzBjB,EAAOV,QAAQ4B,KAAI,SAAC3B,EAAQ4B,GAAT,OACjB,cAAC,IAAMzB,SAAP,UACE,eAACY,EAAA,EAAKC,IAAN,CAAUC,QAAS,EAAnB,UACE,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,EAApB,SACE,wBAEEC,QAAO,kBAAaQ,EAAb,WAFT,sBAEgDA,EAAM,KAFtD,gBACgBA,KAFlB,kBAAuCA,IAMvC,eAACb,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAApB,UACE,cAAC,IAAD,CAAOE,OAAK,EACVC,UAAQ,EAERV,KAAI,kBAAagB,EAAb,WACJvB,GAAImB,IACJC,YAAY,cACZI,KAAK,QANP,gBAEgBD,IAMhB,cAAC,IAAD,CAEEhB,KAAI,kBAAagB,EAAb,WACJE,UAAU,MACVC,UAAU,eAJZ,gBACgBH,MAVlB,kBAAwCA,IAgBxC,cAACb,EAAA,EAAKG,OAAN,CAAaC,MAAO,EAApB,SACE,cAACa,EAAA,EAAD,CAAQC,MAAI,EAEVC,KAAK,QACLL,KAAK,SACLM,QAAS,kBAAMtB,EAAOe,IAJxB,SAME,cAACQ,EAAA,EAAD,CAAMxB,KAAK,mBAAX,eAA0CgB,KAN5C,iBACiBA,KAFnB,kBAAuCA,MAvBzC,cAAkCA,KADpC,mBAAiCA,OAqCnC,eAACb,EAAA,EAAKC,IAAN,WACE,cAACD,EAAA,EAAKG,OAAN,CAAaC,MAAO,IAEpB,cAACJ,EAAA,EAAKG,OAAN,CAAaC,MAAO,EAApB,SACE,eAACa,EAAA,EAAD,CACED,UAAU,cACVE,MAAI,EAACI,cAAc,OACnBH,KAAK,QACLL,KAAK,SACLM,QAAS,kBAAMrB,EAAK,CAAEd,OAAQ,MALhC,UAOE,cAACoC,EAAA,EAAD,CAAMxB,KAAK,SAPb,0BAWF,cAACG,EAAA,EAAKG,OAAN,CAAaC,MAAO,EAApB,SACE,cAACa,EAAA,EAAD,CACEE,KAAK,QACLL,KAAK,SAFP,kCAOF,cAACd,EAAA,EAAKG,OAAN,CAAaC,MAAO,wBCtGpCtB,EAAgB,CACnByC,gBAAiB,IAwFHC,EArFA,SAACrC,GAGf,IADA,IAAIH,EAAU,GACLyC,EAAI,EAAGA,EAAItC,EAAMK,WAAWR,QAAQ2B,OAAQc,IACpDzC,EAAQe,KAAK,CAACd,OAAQ,KAIvB,OAFAyC,OAAOC,OAAO7C,EAAe,CAACE,QAASA,IAGtC,eAAC,IAAMI,SAAP,WACC,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,8BACA,eAACD,EAAA,EAAD,CAAQC,GAAG,KAAX,sBAA0BH,EAAMJ,YAAhC,OACA,cAAC,IAAD,CACCD,cAAeA,EACZS,SAAU,SAACC,GACTL,EAAMyC,sBAAsBpC,IAHlC,SAMI,cAAGE,OAAH,OACD,cAACC,EAAA,EAAD,CAAWC,MAAI,EAAf,SACE,cAAC,IAAD,UACC,cAAC,IAAD,CAAYC,KAAK,UAAjB,SACI,eAACG,EAAA,EAAD,WACF,eAACA,EAAA,EAAKC,IAAN,CAAUC,QAAS,EAAnB,UACK,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,EAApB,SACG,uBAAOC,QAAQ,OAAf,oBAEF,cAACL,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAApB,SACJ,cAAC,IAAD,CAAOE,OAAK,EACXC,UAAQ,EACHC,GAAG,kBACHlB,GAAImB,IACJZ,KAAK,kBACLa,YAAY,cAIfvB,EAAMK,WAAWR,QAAQ2B,OAAS,GACnCxB,EAAMK,WAAWR,QAAQ4B,KAAI,SAAC3B,EAAQ4B,GAAT,OAC5B,eAACb,EAAA,EAAKC,IAAN,CAAUC,QAAS,EAAnB,UACC,cAACF,EAAA,EAAKG,OAAN,CAAaC,MAAO,EAApB,SACC,uBAECC,QAAO,kBAAaQ,EAAb,WAFR,SAIE5B,EAAOA,QAJT,gBACe4B,KAFhB,kBAAuCA,IAQtC,eAACb,EAAA,EAAKG,OAAN,CAAaC,MAAO,GAApB,UACE,cAAC,IAAD,CAAOE,OAAK,EACXC,UAAQ,EAERsB,IAAI,IACJC,IAAI,KACJxC,GAAImB,IACHZ,KAAI,kBAAagB,EAAb,WACJH,YAAY,WACZI,KAAK,UARP,gBAEeD,IAQf,cAAC,IAAD,CAEAhB,KAAI,kBAAagB,EAAb,WACJE,UAAU,MACVC,UAAU,eAJV,gBACcH,MAZhB,kBAAwCA,MAT1C,cAAkCA,OA6BrC,cAACb,EAAA,EAAKC,IAAN,UACG,cAACD,EAAA,EAAKG,OAAN,UACD,cAACc,EAAA,EAAD,CAAQE,KAAK,QAAQH,UAAU,cAAcF,KAAK,SAAlD,qD,kBC5ETiB,EAAS,CAAE3B,MAAO,IAAK4B,OAAQ,KAkEtBC,E,uKA/DJ,IAAD,OACJC,EAAqBC,KAAKhD,MAAMiD,cAAcvB,MAChD,OACC,eAAC,IAAMzB,SAAP,WACD,cAACC,EAAA,EAAD,CAAQC,GAAG,KAAX,mCACE,qBAAK0B,UAAU,kBAAf,SACC,cAACqB,EAAA,EAAD,CAASC,UAAQ,EAAC9B,GAAG,kBAAkB+B,MAAOR,EAA9C,SACE,eAAC1C,EAAA,EAAD,CAAQC,GAAG,KAAKkD,UAAQ,EAAxB,oBAEE,eAACnD,EAAA,EAAOoD,UAAR,qBACSP,EAAmB,EAD5B,QAGA,cAAC7C,EAAA,EAAOoD,UAAR,UACEN,KAAKhD,MAAMK,WAAWR,QAAQkD,GAAoBjD,gBAM3D,eAACI,EAAA,EAAD,CAAQC,GAAG,KAAX,qBAAyB6C,KAAKhD,MAAMJ,eACpC,eAAC2D,EAAA,EAAD,CAAOvB,KAAK,QAAQwB,QAAM,EAA1B,UACC,qCACC,qBAAKnC,GAAG,KACP2B,KAAKhD,MAAMK,WAAWR,QAAQ4B,KAAI,SAACgC,EAAM/B,GACzC,OAAIA,IAAU,EAAK1B,MAAMiD,cAAcvB,MAC/B,qBAAKL,GAAG,SAASQ,UAAU,UAA3B,cAAgDH,IAEhD,qBAAKL,GAAG,IAAR,cAAuBK,UAI/B,cAAC6B,EAAA,EAAMrD,OAAP,UACE,eAACqD,EAAA,EAAMzC,IAAP,WACC,cAACyC,EAAA,EAAMG,KAAP,mBACCV,KAAKhD,MAAMK,WAAWR,QAAQ4B,KAAI,SAAC3B,EAAQ4B,GAAT,OACnC,cAAC6B,EAAA,EAAMG,KAAP,UAAoC5D,EAAOA,QAA3C,eAAyB4B,YAI5B,cAAC6B,EAAA,EAAMI,KAAP,UACEX,KAAKhD,MAAM4D,gBAAgBnC,KAAI,SAACoC,EAAanC,GAAd,OAC/B,eAAC6B,EAAA,EAAMzC,IAAP,WACG,cAACyC,EAAA,EAAMG,KAAP,UAAoDG,EAAYnD,MAAhE,gCAA0CgB,IAC3CmC,EAAYhE,QAAQ4B,KAAI,SAAC3B,EAAQ4B,GAAT,OACvB,cAAC6B,EAAA,EAAMG,KAAP,UAAoD5D,EAAOA,QAA3D,gCAA0C4B,SAH7C,+BAAwCA,SAQ1C,cAAC6B,EAAA,EAAMO,OAAP,UACC,eAACP,EAAA,EAAMzC,IAAP,WACG,cAACyC,EAAA,EAAMG,KAAP,sBACDV,KAAKhD,MAAM+D,QAAQtC,KAAI,SAAC3B,EAAQ4B,GAAT,OACtB,cAAC6B,EAAA,EAAMG,KAAP,UAAsC5D,EAAOkE,KAA7C,kBAA4BtC,sB,GAtDjBuC,a,6DCNPC,I,2EAAf,4BAAAC,EAAA,sEAC2BC,MAAM,yBADjC,cACUC,EADV,gBAEiBA,EAASC,OAF1B,oF,+BAKeC,I,2EAAf,4BAAAJ,EAAA,sEAC2BC,MAAM,oBADjC,cACUC,EADV,gBAEiBA,EAASC,OAF1B,oF,+BAKehE,E,8EAAf,WAA4BmD,GAA5B,eAAAU,EAAA,sEACyBC,MAAM,mBAAoB,CAC7CI,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAACvE,WAAYoD,MAJxC,cACQY,EADR,gBAMeA,EAASC,OANxB,oF,+BASe7B,E,gFAAf,WAAqCgB,EAAMpC,GAA3C,eAAA8C,EAAA,sEACyBC,MAAM,wBAAyB,CAClDI,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAAChB,gBAAiBH,EAAMoB,SAAUxD,MAJ7D,cACQgD,EADR,gBAMeA,EAASC,OANxB,oF,sBASAQ,QAAQZ,mBAAqBA,EAC7BY,QAAQP,wBAA0BA,EAClCO,QAAQxE,aAAeA,EACvBwE,QAAQrC,sBAAwBA,EAEjB,OAACyB,qBAAoBK,0BAAyBjE,eAAcmC,yBCkG5DsC,G,yDAvHb,WAAY/E,GAAQ,IAAD,8BACjB,cAAMA,IACHgF,MAAQ,CACZC,aAAa,EACbC,kBAAkB,EAClBC,YAAY,EACZC,aAAa,EACbxF,YAAa,GACbiF,SAAU,EACVxE,WAAY,GACZuD,gBAAiB,IAElB,EAAKsB,iBAAmB,EAAKA,iBAAiBG,KAAtB,gBACxB,EAAK/E,aAAe,EAAKA,aAAa+E,KAAlB,gBACpB,EAAK5C,sBAAwB,EAAKA,sBAAsB4C,KAA3B,gBAC7B,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBAfT,E,+DAmBnBrC,KAAKuC,SAAS,CAACL,kBAAkB,EAAMD,aAAa,M,mCAGxC5E,GAAa,IAAD,OACtBmF,EAAIlF,aAAaD,GAChBoF,MAAK,SAAApB,GACL,EAAKkB,SAAS,CACblF,WAAY,CAACR,QAASwE,EAASxE,SAC/BD,YAAayE,EAASqB,YACtBb,SAAUR,EAASsB,UACnBT,kBAAkB,EAClBC,YAAY,S,4CAKKvB,GAAkB,IAAD,OACpC4B,EAAI/C,sBAAsBmB,EAAiBZ,KAAKgC,MAAMH,UACrDY,MAAK,SAAApB,GACJ,EAAKkB,SAAS,CAChB3B,gBAAiBS,EAAST,gBAC1BG,QAASM,EAASuB,kBAClB3C,cAAeoB,EAASpB,cACxBkC,YAAY,EACZC,aAAa,S,6CAMfpC,KAAKuC,SAAS,CAAEJ,YAAY,EAAMC,aAAa,M,0CAG7CS,SAASC,MAAQ,8B,+BAIlB,OACA,sBAAKjE,UAAU,YAAf,UACC,eAACkE,EAAA,EAAD,CAAMC,UAAQ,EAACC,WAAS,EAAxB,UACC,cAACF,EAAA,EAAKG,KAAN,CAAWrE,UAAU,cAArB,SACC,cAAC,IAAD,CAAiBE,KAAMoE,QAExB,cAACJ,EAAA,EAAKG,KAAN,CAAWrE,UAAU,aAArB,0CAEE,eAACqB,EAAA,EAAD,CAASkD,OAAO,OAAOvE,UAAU,iBAAjC,UACEmB,KAAKgC,MAAMC,aACX,eAAC,IAAMhF,SAAP,WACF,mRAKA,qKAIA,cAAC6B,EAAA,EAAD,CACCE,KAAK,UACLH,UAAU,gBACVI,QAASe,KAAKkC,iBAHf,kCASElC,KAAKgC,MAAME,kBACX,cAAC,EAAD,CAAc5E,aAAc0C,KAAK1C,eAEjC0C,KAAKgC,MAAMG,YACX,cAAC,EAAD,CACC9E,WAAY2C,KAAKgC,MAAM3E,WACvBT,YAAaoD,KAAKgC,MAAMpF,YACxB6C,sBAAuBO,KAAKP,wBAG7BO,KAAKgC,MAAMI,aACX,eAAC,IAAMnF,SAAP,WACC,cAAC,EAAD,CACC2D,gBAAiBZ,KAAKgC,MAAMpB,gBAC5BG,QAASf,KAAKgC,MAAMjB,QACpBd,cAAeD,KAAKgC,MAAM/B,cAC1B5C,WAAY2C,KAAKgC,MAAM3E,WACvBT,YAAaoD,KAAKgC,MAAMpF,cAEzB,cAACkC,EAAA,EAAD,CACCE,KAAK,QACLH,UAAU,SACVI,QAASe,KAAKsC,qBAHf,8C,GAzGQrB,cCCHoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BX,M","file":"static/js/main.04fec593.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';\nimport { Container, Icon, Button, Header, Input, Grid } from 'semantic-ui-react'\n\n\nconst initialValues = {\n\tsurveyTitle: '',\n  options: [\n    {\n      option: '',\n    },\n  ],\n};\n\nconst CreateSurvey = (props) => (\n  <React.Fragment>    \n    <Header as='h1'>Create your Survey</Header>\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(surveyData) => {\n        props.createSurvey(surveyData);\n      }}\n    >\n      {({ values }) => (\n        <Container text>\n          <Form>\n            <FieldArray name=\"options\">\n              {({ remove, push }) => (\n                <Grid>\n                  <Grid.Row columns={3}>\n                    <Grid.Column width={4}>\n                      <label htmlFor=\"surveyTitle\">Survey Title</label>\n                    </Grid.Column>\n                    <Grid.Column width={10}>\n                    \t<Field fluid\n                        required\n                        id=\"surveyTitle\" \n                        as={Input}\n                        name=\"surveyTitle\" \n                        placeholder=\"surveyTitle\"\n                      /> \n                    </Grid.Column>\n                    <Grid.Column width={2}>\n                    </Grid.Column>\n                  </Grid.Row>\n                  {values.options.length > 0 &&\n                  values.options.map((option, index) => (\n                    <React.Fragment key={`fragment-${index}`}>\n                      <Grid.Row columns={3} key={`row-${index}`}>\n                        <Grid.Column width={4} key={`column1-${index}`}>\n                          <label \n                            key={`label-${index}`}\n                            htmlFor={`options.${index}.option`}>Option {+(index+1)}\n                          </label>\n                        </Grid.Column>\n                        <Grid.Column width={10} key={`column2-${index}`}>\n                          <Field fluid\n                            required\n                            key={`input-${index}`}\n                            name={`options.${index}.option`}\n                            as={Input}\n                            placeholder=\"Your Option\"\n                            type=\"text\"\n                          />\n                          <ErrorMessage\n                            key={`error-${index}`}\n                            name={`options.${index}.option`}\n                            component=\"div\"\n                            className=\"field-error\"\n                          />\n                        </Grid.Column>\n                        <Grid.Column width={2} key={`column3-${index}`}>\n                          <Button icon \n                            key={`button-${index}`}\n                            size=\"large\"\n                            type=\"button\"\n                            onClick={() => remove(index)}\n                          >\n                            <Icon name=\"trash alternate\" key={`icon-${index}`}/>\n                          </Button>\n                        </Grid.Column>\n                      </Grid.Row>\n                    </React.Fragment>\n                  ))} \n                  <Grid.Row>\n                    <Grid.Column width={4}>\n                    </Grid.Column>\n                    <Grid.Column width={5}>\n                      <Button\n                        className=\"float-right\"\n                        icon labelPosition='left'\n                        size=\"large\"\n                        type=\"button\"\n                        onClick={() => push({ option: ''})}\n                      >\n                        <Icon name=\"plus\" /> \n                        Add another Option\n                      </Button>\n                    </Grid.Column>\n                    <Grid.Column width={5}>\n                      <Button \n                        size=\"large\"\n                        type=\"submit\"\n                      >\n                        Create your Survey\n                      </Button>\n                    </Grid.Column>\n                    <Grid.Column width={1}>\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n              )}\n            </FieldArray>\n          </Form>\n        </Container>\n      )}\n    </Formik>\n  </React.Fragment>\n);\n\nexport default CreateSurvey;\n\n\nCreateSurvey.propTypes = {\n\tcreateSurvey: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { Grid, Input, Container, Header, Button } from 'semantic-ui-react'\nimport { Formik, Field, Form, ErrorMessage, FieldArray } from 'formik';\n\n\nlet initialValues = {\n\tparticipantName: '',\n};\n\nconst Survey = (props) => {\n\t// add n options to initialValues for controlled input\n\tlet options = []\n\tfor (var i = 0; i < props.surveyData.options.length; i++) {\n\t\toptions.push({option: \"\"})\n\t}\n\tObject.assign(initialValues, {options: options})\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Header as='h1'>Join this Survey</Header>\n\t\t\t<Header as='h2'>Survey: \"{props.surveyTitle}\"</Header>\n\t\t\t<Formik\n\t\t\t\tinitialValues={initialValues}\n\t      onSubmit={(surveyData) => {\n\t        props.createParticipantData(surveyData)\n\t      }}\n\t    >\n\t    \t{({ values }) => (\n\t\t\t  \t<Container text>\n\t\t\t    \t<Form>\n\t\t\t\t    \t<FieldArray name=\"options\">\n\t\t\t          <Grid>\n\t\t\t\t\t\t    \t<Grid.Row columns={2}>\n\t\t\t\t            <Grid.Column width={4}>\n\t\t\t                <label htmlFor=\"name\">Name</label>\n\t\t\t              </Grid.Column>\n\t\t\t              <Grid.Column width={12}>\n\t\t\t\t\t    \t\t\t\t<Field fluid\n\t\t\t\t\t    \t\t\t\t\trequired\n\t\t\t\t\t              id=\"participantName\" \n\t\t\t\t\t              as={Input}\n\t\t\t\t\t              name=\"participantName\" \n\t\t\t\t\t              placeholder=\"name\"\n\t\t\t\t\t            />\n\t\t\t\t            </Grid.Column>\n\t\t\t            </Grid.Row> \n\t\t\t            {props.surveyData.options.length > 0 &&\n\t\t\t          \t\tprops.surveyData.options.map((option, index) => (\n\t\t\t\t            <Grid.Row columns={2} key={`row-${index}`}>\n\t\t\t\t\t            <Grid.Column width={4} key={`column1-${index}`}>\n\t\t\t\t\t\t            <label \n\t\t\t\t\t\t            \tkey={`label-${index}`} \n\t\t\t\t\t\t            \thtmlFor={`options.${index}.option`}\n\t\t\t\t\t            \t>\n\t\t\t\t\t            \t\t{option.option}\n\t\t\t\t            \t\t</label>\n\t\t\t\t              </Grid.Column>\n\t\t\t\t              <Grid.Column width={12} key={`column2-${index}`}>\n\t\t\t\t                <Field fluid\n\t\t\t\t                \trequired\n\t\t\t\t                \tkey={`input-${index}`}\n\t\t\t\t                \tmin=\"0\"\n\t\t\t\t                \tmax=\"10\"\n\t\t\t\t                \tas={Input}\n\t\t\t\t                  name={`options.${index}.option`}\n\t\t\t\t                  placeholder=\"0 ... 10\"\n\t\t\t\t                  type=\"number\"\n\t\t\t\t                />\n\t\t\t\t                <ErrorMessage\n\t\t\t\t                key={`error-${index}`}\n\t\t\t\t                name={`options.${index}.option`}\n\t\t\t\t                component=\"div\"\n\t\t\t\t                className=\"field-error\"\n\t\t\t\t              \t/>\n\t\t\t\t            \t</Grid.Column>\n\t\t\t\t            </Grid.Row> \n\t\t\t            ))}\n\t\t\t        \t\t<Grid.Row>\n\t\t\t\t            <Grid.Column>\n\t\t\t\t        \t\t\t<Button size=\"large\" className=\"float-right\" type=\"submit\">\n\t\t\t\t        \t\t\t\tSubmit your choices\n\t\t\t        \t\t\t\t</Button>\n\t\t\t\t        \t\t</Grid.Column>\n\t\t\t            </Grid.Row> \n\t\t\t      \t\t</Grid>\n\t\t\t        </FieldArray>\n\t\t\t    \t</Form>\n\t\t\t  \t</Container>\n\t\t  \t)}\n\t  \t</Formik>\n\t\t</React.Fragment>\n\t)\n};\n\nexport default Survey;\n\n\nSurvey.propTypes = {\n\tsurveyData: PropTypes.object,\n\tsurveyTitle: PropTypes.string,\n\tcreateParticipantData: PropTypes.func,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport { Header, Table, Segment } from 'semantic-ui-react'\n\nconst square = { width: 200, height: 200 }\n\nclass Results extends Component {\n\trender() {\n\t\tlet winningOptionIndex = this.props.winningOption.index\n    return (\n \t\t \t<React.Fragment>    \n\t\t\t\t<Header as='h2'>Results of the Survey</Header>\n\t\t    <div className=\"circular-winner\">\n\t\t\t    <Segment circular id=\"circular-winner\" style={square}>\n\t\t\t      <Header as='h2' inverted>\n\t\t\t        Winner:\n\t\t\t        <Header.Subheader>\n\t\t\t        \tOption {winningOptionIndex+1} - \n\t\t        \t</Header.Subheader>\n\t\t        \t<Header.Subheader>\n\t\t\t        \t{this.props.surveyData.options[winningOptionIndex].option}\n\t\t        \t</Header.Subheader>\n\t\t\t      </Header>\n\t\t\t    </Segment>\n\t\t    </div>\n\n\t\t\t\t<Header as='h2'>Survey: {this.props.surveyTitle}</Header>\n\t\t\t\t<Table size=\"large\" celled>\n\t\t\t\t\t<colgroup>\n\t\t\t\t\t\t<col id=\"\" />\n\t\t\t\t\t\t{this.props.surveyData.options.map((data, index) => {\n\t\t\t\t\t\t\tif (index === this.props.winningOption.index) {\n\t\t\t\t\t\t\t\treturn <col id=\"winner\" className=\"winner\" key={`col-${index}`} />\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn <col id=\"\" key={`col-${index}`} />\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})}\n\t\t\t\t\t</colgroup>\n\t\t\t    <Table.Header>\n\t\t\t      <Table.Row>\n\t\t\t      \t<Table.Cell>Name</Table.Cell>\n\t\t\t      \t{this.props.surveyData.options.map((option, index) => (\n\t\t\t\t\t\t    <Table.Cell key={`name-${index}`} >{option.option}</Table.Cell>\n\t\t\t\t\t\t\t))}\n\t\t\t      </Table.Row>\n\t\t\t    </Table.Header>\n\t\t\t    <Table.Body>\n\t\t\t    \t{this.props.participantData.map((participant, index) => (\n\t\t\t\t    \t<Table.Row key={`participant-data-row-${index}`} >\t\n\t\t\t\t        <Table.Cell key={`participant-name-cell-${index}`}>{participant.name}</Table.Cell>\n\t\t\t\t    \t\t{participant.options.map((option, index) => (\n\t\t\t\t        <Table.Cell key={`participant-data-cell-${index}`}>{option.option}</Table.Cell>\n\t\t\t\t        ))}\n\t\t\t\t      </Table.Row>\n\t\t\t    \t))}\n\t\t    \t</Table.Body>\n\t\t    \t<Table.Footer>\n\t\t    \t\t<Table.Row>\t\n\t\t\t        <Table.Cell>Results</Table.Cell>\n\t\t\t    \t\t{this.props.results.map((option, index) => (\n\t\t\t        <Table.Cell key={`results-${index}`}>{option.sum}</Table.Cell>\n\t\t\t        ))}\n\t\t\t      </Table.Row>\n\t\t    \t</Table.Footer>\n    \t\t</Table>\n\t\t\t</React.Fragment>\n    );\n  }\n}\n\nexport default Results;\n\n\nResults.propTypes = {\n\tparticipantData: PropTypes.array,\n\tresults: PropTypes.array,\n\twinningOption: PropTypes.object,\n\tsurveyData: PropTypes.object,\n\tsurveyTitle: PropTypes.string,\n};\n","async function getParticipantData() {\n    const response = await fetch('/api/participant-data');\n    return await response.json();\n}\n\nasync function getSurveyDataFromServer() {\n    const response = await fetch('/api/survey-data');\n    return await response.json();\n}\n\nasync function createSurvey(data) {\n  const response = await fetch(`/api/survey-data`, {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({surveyData: data})\n    })\n  return await response.json();\n}\n\nasync function createParticipantData(data, id) {\n  const response = await fetch(`/api/participant-data`, {\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body: JSON.stringify({participantData: data, surveyId: id})\n    })\n  return await response.json();\n}\n\nexports.getParticipantData = getParticipantData;\nexports.getSurveyDataFromServer = getSurveyDataFromServer;\nexports.createSurvey = createSurvey;\nexports.createParticipantData = createParticipantData;\n\nexport default {getParticipantData, getSurveyDataFromServer, createSurvey, createParticipantData}","import React, { Component } from 'react';\nimport CreateSurvey from './CreateSurvey';\nimport Survey from './Survey';\nimport Results from './Results';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPoll } from '@fortawesome/free-solid-svg-icons'\nimport { Segment, Button, Menu } from 'semantic-ui-react'\nimport api from './apiCall'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\tshowLanding: true,\n\t\t\tshowCreateSurvey: false,\n\t\t\tshowSurvey: false,\n\t\t\tshowResults: false,\n\t\t\tsurveyTitle: \"\",\n\t\t\tsurveyId: 0,\n\t\t\tsurveyData: {},\n\t\t\tparticipantData: []\n\t\t};\n\t\tthis.showCreateSurvey = this.showCreateSurvey.bind(this);\n\t\tthis.createSurvey = this.createSurvey.bind(this);\n\t\tthis.createParticipantData = this.createParticipantData.bind(this);\n\t\tthis.createNewParticipant = this.createNewParticipant.bind(this);\n\t}\n\n\tshowCreateSurvey() {\n\t\tthis.setState({showCreateSurvey: true, showLanding: false})\n\t}\n\n\tcreateSurvey(surveyData) {\n    api.createSurvey(surveyData)\n    .then(response => {\n    \tthis.setState({\n    \t\tsurveyData: {options: response.options}, \n    \t\tsurveyTitle: response.survey_name, \n    \t\tsurveyId: response.survey_id,\n    \t\tshowCreateSurvey: false, \n    \t\tshowSurvey: true \n    \t})\n    });\n\t}\t\n\n\tcreateParticipantData(participantData) {\n    api.createParticipantData(participantData, this.state.surveyId)\n    .then(response => {\n      this.setState({\n\t\t\t\tparticipantData: response.participantData,\n\t\t\t\tresults: response.resultsFromSurvey, \n\t\t\t\twinningOption: response.winningOption,\n\t\t\t\tshowSurvey: false, \n\t\t\t\tshowResults: true\n\t\t\t})\n    });\n\t}\n\n\tcreateNewParticipant() {\n\t\tthis.setState({ showSurvey: true, showResults: false,})\n\t}\n  componentDidMount(){\n    document.title = \"Survey Systemic Consensus\"\n  }\n\n  render() {\n  \treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<Menu pointing secondary>\n\t\t\t\t\t<Menu.Item className=\"icon-header\">\n\t\t\t\t\t\t<FontAwesomeIcon icon={faPoll} />\t\n\t\t\t\t\t</Menu.Item>\n\t\t\t\t\t<Menu.Item className=\"nav-header\">Survey Systemic Consensus</Menu.Item>\n\t\t\t\t</Menu>\n\t      <Segment padded='very' className=\"main-container\">\n\t\t      {this.state.showLanding && \n\t\t      \t<React.Fragment>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tThis is a survey with the Systemic Consensus method. This means, all participants \n\t\t\t\t\t\t\t\tvote his restistance against each option. With every option you can choose from 0 to\n\t\t\t\t\t\t\t\t 10. 0 means no resistance. And 10 means absolutly resistant to this option.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tThis method help groups to find a better solution, because less resistance to the \n\t\t\t\t\t\t\t\tupcoming choice and more harmony inside the group.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\tsize=\"massive\" \n\t\t\t\t\t\t\t\tclassName=\"center-button\" \n\t\t\t\t\t\t\t\tonClick={this.showCreateSurvey}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tStart your Survey\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t}\n\t\t      {this.state.showCreateSurvey && \n\t      \t\t<CreateSurvey createSurvey={this.createSurvey} />\n\t\t      }\n\t\t      {this.state.showSurvey && \n\t\t      \t<Survey \n\t\t      \t\tsurveyData={this.state.surveyData}\n\t\t      \t\tsurveyTitle={this.state.surveyTitle}\n\t\t      \t\tcreateParticipantData={this.createParticipantData} \n\t      \t\t/>\n\t      \t}\n\t\t      {this.state.showResults && \n\t\t      \t<React.Fragment>\n\t\t\t      \t<Results \n\t\t\t      \t\tparticipantData={this.state.participantData} \n\t\t\t      \t\tresults={this.state.results}\n\t\t\t      \t\twinningOption={this.state.winningOption}\n\t\t\t      \t\tsurveyData={this.state.surveyData}\n\t\t\t      \t\tsurveyTitle={this.state.surveyTitle}\n\t\t      \t\t/>\n\t\t      \t\t<Button \n\t\t      \t\t\tsize=\"large\" \n\t\t      \t\t\tclassName=\"center\" \n\t\t      \t\t\tonClick={this.createNewParticipant}\n\t      \t\t\t>\n\t\t      \t\t\tAdd new Participant\n\t      \t\t\t</Button>\n\t      \t\t</React.Fragment>\n\t      \t}\n      \t</Segment>\n    \t</div>\n  \t)\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}